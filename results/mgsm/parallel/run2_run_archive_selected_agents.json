[
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (27.3%, 43.8%), Median: 35.2%",
        "acc_list": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1
        ],
        "cost_list": [
            0.0027159999999999997,
            0.002689,
            0.002179,
            0.0021995,
            0.0036204999999999996,
            0.0029344999999999996,
            0.001876,
            0.0023645000000000003,
            0.0019420000000000001,
            0.0015700000000000002,
            0.0016539999999999997,
            0.0017595,
            0.002065,
            0.0027065,
            0.0018495,
            0.0023225,
            0.001807,
            0.0021959999999999996,
            0.001803,
            0.0019190000000000001,
            0.003178,
            0.0040405,
            0.0018565,
            0.0018304999999999997,
            0.0023380000000000002,
            0.0017595,
            0.0025045,
            0.0017534999999999999,
            0.0035855,
            0.0018094999999999997,
            0.0030605,
            0.00234,
            0.001886,
            0.0016225000000000002,
            0.0024785,
            0.002765,
            0.003825,
            0.0022509999999999995,
            0.0097695,
            0.007678000000000001,
            0.0018795,
            0.0024395000000000003,
            0.001968,
            0.002381,
            0.0015935,
            0.002265,
            0.0018304999999999999,
            0.002066,
            0.0017429999999999998,
            0.0020615,
            0.002874,
            0.0016514999999999998,
            0.0024285,
            0.002533,
            0.0024485,
            0.002227,
            0.0024679999999999997,
            0.0034695000000000004,
            0.0036999999999999993,
            0.0020334999999999997,
            0.0015375000000000002,
            0.002267,
            0.001448,
            0.0026245,
            0.002532,
            0.0017775,
            0.0017890000000000002,
            0.0016705000000000001,
            0.001982,
            0.0021025,
            0.002926,
            0.0017075,
            0.0020715,
            0.0018290000000000001,
            0.0012935,
            0.0022669999999999995,
            0.002352,
            0.0018204999999999999,
            0.0018755,
            0.002131,
            0.002002,
            0.0032855000000000002,
            0.0017455,
            0.00225,
            0.001504,
            0.00146,
            0.0051985,
            0.0032795,
            0.0022445,
            0.0013089999999999998,
            0.0035645,
            0.00226,
            0.0022180000000000004,
            0.0016049999999999999,
            0.0019119999999999999,
            0.001443,
            0.0016759999999999998,
            0.0039105,
            0.0048475,
            0.0016945,
            0.0026680000000000002,
            0.0021365000000000004,
            0.0024969999999999997,
            0.0016020000000000001,
            0.0025115,
            0.0042699999999999995,
            0.002168,
            0.001967,
            0.0017375000000000001,
            0.0015639999999999999,
            0.001746,
            0.0022040000000000002,
            0.0020534999999999998,
            0.0020765,
            0.005701,
            0.0025169999999999997,
            0.0023315,
            0.0016044999999999998,
            0.0022519999999999997,
            0.0016535,
            0.0018889999999999998,
            0.0028369999999999997,
            0.0016245,
            0.0020315,
            0.0017609999999999998,
            0.0016219999999999997,
            0.0031729999999999996,
            0.0028764999999999997
        ]
    },
    {
        "thought": "Incorporating feedback refinement into the principle-driven self-consistency architecture can lead to more accurate solutions. The architecture will involve extracting principles first, then using multiple CoT agents with varied instructions to generate diverse solutions. These solutions will then be refined through a feedback loop, where each CoT agent critiques the solutions provided by the other agents. The final answer will be determined through majority voting after the feedback refinement step.",
        "name": "Feedback-Refined Principle-Driven Self-Consistency",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = 'What are the mathematical principles and concepts involved in solving this task? First, think step by step. Then list all involved principles and explain them.'\n        \n        # Instructions for solving the task based on the principles with slight variations\n        cot_instructions = [\n            'Given the question and the principles behind the question, think step by step and solve the task with a focus on accuracy.',\n            'Given the question and the principles behind the question, think step by step and solve the task with a focus on efficiency.',\n            'Given the question and the principles behind the question, think step by step and solve the task considering all possible edge cases.',\n            'Given the question and the principles behind the question, think step by step and solve the task with a focus on simplification.',\n            'Given the question and the principles behind the question, think step by step and solve the task with a focus on thorough explanation.'\n        ]\n        N = 5  # Number of CoT agents for diverse answers\n\n        # Initialize agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n        feedback_agent = LLMAgentBase(['feedback'], 'Feedback Agent')\n\n        # Get the principles involved in the task\n        principle_thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Prepare inputs for CoT agents\n        cot_inputs = [taskInfo, principle_thinking, principle]\n\n        # Generate initial answers from multiple CoT agents\n        initial_answers = []\n        for i in range(N):\n            cot_thinking, cot_answer = cot_agents[i](cot_inputs, cot_instructions[i])\n            initial_answers.append(cot_answer)\n\n        # Generate feedback for each answer from other CoT agents\n        refined_answers = []\n        for i in range(N):\n            feedbacks = []\n            for j in range(N):\n                if i != j:\n                    feedback = feedback_agent([taskInfo, initial_answers[i]], f'Please review the answer provided by another agent and provide feedback.')\n                    feedbacks.append(feedback[0])\n            refined_inputs = cot_inputs + feedbacks\n            refined_thinking, refined_answer = cot_agents[i](refined_inputs, f'Given the feedback from other agents, refine your answer.')\n            refined_answers.append(refined_answer)\n\n        # Majority voting function to select the most common answer\n        from collections import Counter\n        def majority_voting(answers):\n            answer_contents = [answer.content for answer in answers]\n            votes = Counter(answer_contents)\n            top_answers = votes.most_common()\n            max_votes = top_answers[0][1]\n            top_candidates = [answer for answer, count in top_answers if count == max_votes]\n            if len(top_candidates) > 1:\n                second_round_votes = Counter(top_candidates)\n                return second_round_votes.most_common(1)[0][0]  # Tie-breaking: second round of voting among top candidates\n            return top_answers[0][0]\n\n        # Ensembling the refined answers from multiple CoT agents\n        final_answer_content = majority_voting(refined_answers)\n        final_answer = Info('answer', 'Final Answer', final_answer_content, -1)\n        return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (50.8%, 68.0%), Median: 59.4%",
        "generation": 21,
        "acc_list": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "cost_list": [
            0.0095965,
            0.010986499999999998,
            0.009556499999999999,
            0.009737,
            0.011011499999999999,
            0.008897,
            0.0083435,
            0.007395500000000001,
            0.007864999999999999,
            0.006177,
            0.008524,
            0.008777999999999998,
            0.006713000000000001,
            0.009752500000000002,
            0.008263,
            0.008025499999999998,
            0.008531000000000002,
            0.0080895,
            0.0073075,
            0.009789,
            0.011480499999999998,
            0.011613500000000002,
            0.007871500000000003,
            0.007460999999999999,
            0.006851499999999999,
            0.009344500000000002,
            0.009132000000000003,
            0.008783,
            0.012325999999999998,
            0.0074210000000000005,
            0.012452000000000001,
            0.0082175,
            0.009855499999999998,
            0.0064305,
            0.010653,
            0.010121499999999999,
            0.008991999999999998,
            0.011725500000000002,
            0.011848,
            0.0103585,
            0.008765999999999998,
            0.009784500000000002,
            0.009283000000000001,
            0.009819999999999999,
            0.008437999999999998,
            0.007390499999999998,
            0.009629999999999998,
            0.008111,
            0.0093375,
            0.009370000000000002,
            0.008725499999999999,
            0.006139999999999999,
            0.009699,
            0.0074705,
            0.007074499999999999,
            0.006849,
            0.008088999999999999,
            0.008281499999999997,
            0.0142235,
            0.007526999999999998,
            0.008513500000000002,
            0.0066714999999999995,
            0.0064125000000000015,
            0.008984500000000003,
            0.008430499999999997,
            0.008770499999999999,
            0.009188000000000002,
            0.0077335,
            0.008836999999999998,
            0.0097585,
            0.010634999999999999,
            0.0070735,
            0.008304,
            0.008679999999999998,
            0.007103999999999999,
            0.008664499999999999,
            0.008647499999999999,
            0.0092915,
            0.007922,
            0.0067209999999999995,
            0.0084445,
            0.0089705,
            0.0085645,
            0.008974,
            0.006538499999999999,
            0.006845,
            0.0155025,
            0.013418500000000002,
            0.008135499999999999,
            0.005834999999999998,
            0.009310500000000001,
            0.009669999999999996,
            0.010222500000000002,
            0.007871000000000001,
            0.008009000000000002,
            0.0061575,
            0.007758000000000002,
            0.009071000000000001,
            0.010420999999999996,
            0.0077855,
            0.009503000000000001,
            0.007426500000000002,
            0.0103565,
            0.008216000000000001,
            0.007424,
            0.0088135,
            0.008797500000000001,
            0.007920000000000002,
            0.0098595,
            0.007687500000000001,
            0.007103999999999998,
            0.008111499999999999,
            0.007164500000000001,
            0.007817,
            0.014301999999999997,
            0.008481999999999996,
            0.008584500000000004,
            0.006684499999999998,
            0.010732499999999999,
            0.0075074999999999985,
            0.0094225,
            0.008746499999999999,
            0.008912,
            0.009558000000000002,
            0.007995500000000001,
            0.0068309999999999985,
            0.011407,
            0.008369999999999997
        ]
    }
]