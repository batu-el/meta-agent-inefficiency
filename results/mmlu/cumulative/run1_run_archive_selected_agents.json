[
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (60.9%, 76.6%), Median: 68.8%",
        "acc_list": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "cost_list": [
            0.000288,
            0.000817,
            0.0006745,
            0.0007264999999999999,
            0.0002925,
            0.0003895,
            0.0019725000000000003,
            0.0003805,
            0.0013465,
            0.0018635000000000001,
            0.0006315,
            0.0007359999999999999,
            0.0013425,
            0.0038805,
            0.00026849999999999997,
            0.002822,
            0.001148,
            0.00035749999999999996,
            0.0004455,
            0.0003645,
            0.00036050000000000003,
            0.000342,
            0.0008755,
            0.00027249999999999996,
            0.0003095,
            0.0027285,
            0.001026,
            0.0007084999999999999,
            0.000295,
            0.000843,
            0.0003155,
            0.0006295000000000001,
            0.0002975,
            0.000643,
            0.0003065,
            0.0030235,
            0.0008005,
            0.0005035,
            0.00030000000000000003,
            0.0007865,
            0.000356,
            0.0003285,
            0.00034599999999999995,
            0.0008384999999999999,
            0.0025399999999999997,
            0.002395,
            0.0007360000000000001,
            0.0009735000000000001,
            0.0011795,
            0.0002795,
            0.0008174999999999999,
            0.00039150000000000003,
            0.0007405000000000001,
            0.0034010000000000004,
            0.0021225000000000003,
            0.0002975,
            0.0010609999999999999,
            0.0018050000000000002,
            0.00059,
            0.000375,
            0.000327,
            0.001225,
            0.000647,
            0.0008425,
            0.000401,
            0.001128,
            0.000789,
            0.004003,
            0.0034665000000000004,
            0.000759,
            0.0027835,
            0.0004585,
            0.000401,
            0.0003535,
            0.0017339999999999999,
            0.0011155,
            0.00039150000000000003,
            0.0025935,
            0.0032360000000000006,
            0.003758,
            0.0029255,
            0.0030865,
            0.000589,
            0.0016845,
            0.003098,
            0.00030849999999999996,
            0.0013334999999999998,
            0.00035400000000000004,
            0.000357,
            0.0004745,
            0.0033859999999999997,
            0.0029674999999999997,
            0.0008370000000000001,
            0.0006349999999999999,
            0.0021809999999999998,
            0.0007740000000000001,
            0.000284,
            0.000619,
            0.000376,
            0.0003595,
            0.0013025,
            0.0006765,
            0.0035175000000000002,
            0.000303,
            0.0006935,
            0.000289,
            0.001316,
            0.000699,
            0.001314,
            0.000276,
            0.0006669999999999998,
            0.00034,
            0.0003135,
            0.000269,
            0.0011935,
            0.001259,
            0.0005275,
            0.00033,
            0.0004315,
            0.0032655,
            0.000503,
            0.0002965,
            0.0011805,
            0.001665,
            0.0005729999999999999,
            0.0017320000000000002,
            0.0006665,
            0.00039
        ]
    },
    {
        "thought": "**Insights:**\nTo enhance the innovation, the new architecture will focus on leveraging meta-learning principles to enable the agent to iteratively refine its reasoning and solution based on feedback. This ensures a self-improving and adaptive reasoning process.\n\n**Overall Idea:**\nThe 'Self-Improving Reasoning' architecture will introduce an agent that iteratively refines its reasoning and solution based on feedback from a Meta-Critic agent. This approach leverages the principles of meta-learning, where the agent learns from its mistakes and continuously improves its performance.\n\n**Implementation:**\n1. Use a Task Classification agent to determine the domain of the task.\n2. Dynamically retrieve domain-specific external knowledge based on the classified domain.\n3. Employ a Chain-of-Thought agent for initial reasoning and solution generation.\n4. Introduce a Meta-Critic agent to provide feedback on the initial reasoning and solution.\n5. Implement a Self-Improving agent that iteratively refines the reasoning and solution based on feedback from the Meta-Critic agent.\n6. Use a Reflexion agent to integrate the final refined solution and provide the final answer.",
        "name": "Self-Improving Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instructions for various agents\n    classification_instruction = 'Classify the task into one of the following domains: STEM, Social Sciences, Humanities, General Knowledge.'\n    knowledge_instruction_stem = 'Retrieve relevant STEM knowledge based on the task description.'\n    knowledge_instruction_social_sciences = 'Retrieve relevant Social Sciences knowledge based on the task description.'\n    knowledge_instruction_humanities = 'Retrieve relevant Humanities knowledge based on the task description.'\n    knowledge_instruction_general = 'Retrieve relevant General Knowledge based on the task description.'\n    cot_instruction = 'Given the retrieved information, please think step by step and then solve the task.'\n    meta_critic_instruction = 'Review the reasoning and solution provided and offer constructive feedback on its accuracy and completeness.'\n    self_improving_instruction = 'Based on the feedback, refine your reasoning and solution iteratively to improve accuracy and completeness.'\n    reflexion_instruction = 'Integrate the final refined solution and provide the final answer.'\n\n    # Task Classification Agent\n    classification_agent = LLMAgentBase(['domain'], 'Task Classification Agent')\n    domain_info = classification_agent([taskInfo], classification_instruction)[0]\n\n    # Dynamically retrieve domain-specific external knowledge\n    knowledge_instruction_map = {\n        'stem': knowledge_instruction_stem,\n        'social sciences': knowledge_instruction_social_sciences,\n        'humanities': knowledge_instruction_humanities,\n        'general': knowledge_instruction_general\n    }\n    knowledge_instruction = knowledge_instruction_map.get(domain_info.content.lower(), knowledge_instruction_general)\n    knowledge_agent = LLMAgentBase(['knowledge'], 'Knowledge Retrieval Agent')\n    knowledge_info = knowledge_agent([taskInfo], knowledge_instruction)[0]\n\n    # Initial reasoning and solution generation\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n    cot_thinking, cot_answer = cot_agent([taskInfo, knowledge_info], cot_instruction)\n\n    # Meta-Critic feedback\n    meta_critic_agent = LLMAgentBase(['feedback'], 'Meta-Critic Agent')\n    feedback = meta_critic_agent([taskInfo, cot_thinking, cot_answer], meta_critic_instruction)[0]\n\n    # Iterative refinement with Self-Improving Agent\n    N_max = 5  # Maximum number of refinement iterations\n    self_improving_agent = LLMAgentBase(['thinking', 'answer'], 'Self-Improving Agent')\n    refined_thinking, refined_answer = cot_thinking, cot_answer\n    refinement_inputs = [taskInfo, knowledge_info, refined_thinking, refined_answer, feedback]\n    for i in range(N_max):\n        refined_thinking, refined_answer = self_improving_agent(refinement_inputs, self_improving_instruction)\n        feedback = meta_critic_agent([taskInfo, refined_thinking, refined_answer], meta_critic_instruction)[0]\n        refinement_inputs = [taskInfo, knowledge_info, refined_thinking, refined_answer, feedback]\n        if feedback.content.lower() == 'true':\n            break\n\n    # Final integration with Reflexion agent\n    reflection_agent = LLMAgentBase(['thinking', 'answer'], 'Reflexion Agent')\n    final_thinking, final_answer = reflection_agent([taskInfo, refined_thinking, refined_answer], reflexion_instruction)\n    return final_answer\n",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "generation": 16,
        "acc_list": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ],
        "cost_list": [
            0.0022755,
            0.0029745,
            0.006016500000000001,
            0.002547,
            0.0022939999999999996,
            0.003184999999999999,
            0.0025675,
            0.0030015000000000003,
            0.0048224999999999995,
            0.0028745000000000003,
            0.0025779999999999996,
            0.0027274999999999995,
            0.005241,
            0.0037705000000000004,
            0.002249,
            0.002881,
            0.005084,
            0.002885499999999999,
            0.00287,
            0.0027915,
            0.003578,
            0.0034305,
            0.0028970000000000003,
            0.003295,
            0.0027205,
            0.003624,
            0.0037430000000000002,
            0.0025110000000000006,
            0.0029925000000000004,
            0.0034545,
            0.002235,
            0.002165,
            0.002019,
            0.002311,
            0.0021015,
            0.0037355,
            0.0030740000000000003,
            0.0033529999999999996,
            0.0023345,
            0.004046500000000001,
            0.0026019999999999997,
            0.0026619999999999994,
            0.002711,
            0.0039019999999999997,
            0.002756,
            0.0038009999999999993,
            0.002451,
            0.0038895,
            0.003675,
            0.0022395,
            0.0029834999999999996,
            0.002903,
            0.0026025,
            0.004203,
            0.003252,
            0.0020695,
            0.0021160000000000003,
            0.002517,
            0.004849999999999999,
            0.003545499999999999,
            0.0030920000000000006,
            0.0027549999999999996,
            0.0020725,
            0.0031009999999999996,
            0.003342,
            0.0045165,
            0.0031535000000000005,
            0.004407499999999999,
            0.005234000000000001,
            0.0033619999999999995,
            0.002865500000000001,
            0.0031835,
            0.0037405,
            0.003327,
            0.003977,
            0.0028249999999999994,
            0.003308,
            0.003001,
            0.0037429999999999994,
            0.006782,
            0.002693,
            0.0026829999999999996,
            0.0042815,
            0.0024289999999999997,
            0.0030734999999999994,
            0.00235,
            0.0022275000000000003,
            0.0036465,
            0.0032579999999999996,
            0.0037715,
            0.0044765,
            0.0031765,
            0.0032965,
            0.0024184999999999996,
            0.004319999999999999,
            0.0032435,
            0.001866,
            0.002524,
            0.0030885,
            0.0033290000000000004,
            0.0030164999999999997,
            0.002484,
            0.004097,
            0.0020355,
            0.0022814999999999997,
            0.0029695,
            0.0036815000000000003,
            0.0058154999999999995,
            0.005692999999999999,
            0.002327,
            0.0021735,
            0.002855,
            0.0030015000000000003,
            0.0023150000000000002,
            0.0051025,
            0.0043324999999999995,
            0.004627,
            0.002442,
            0.0036149999999999997,
            0.0039115,
            0.0038965,
            0.0025989999999999997,
            0.0028590000000000004,
            0.002826,
            0.005181999999999999,
            0.0038284999999999994,
            0.0019535,
            0.0036705000000000006
        ]
    }
]