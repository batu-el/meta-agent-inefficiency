[
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Physics Expert', 'Chemistry Expert', 'Biology Expert', 'Science Generalist']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Physics, Chemistry, Biology Expert, or Science Generalist.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'physics' in choice.content.lower():\n            expert_id = 0\n        elif 'chemistry' in choice.content.lower():\n            expert_id = 1\n        elif 'biology' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to Science Generalist\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (23.8%, 38.1%), Median: 30.6%",
        "acc_list": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "cost_list": [
            0.000291,
            0.0004405,
            0.000362,
            0.000327,
            0.0005859999999999999,
            0.00041,
            0.0003595,
            0.000592,
            0.0004035,
            0.0003145,
            0.000505,
            0.000343,
            0.0005214999999999999,
            0.0002995,
            0.000486,
            0.00040400000000000006,
            0.0003195,
            0.000381,
            0.0007095,
            0.0003675,
            0.0004435,
            0.00029,
            0.00047599999999999997,
            0.00036899999999999997,
            0.000579,
            0.0006015,
            0.0003545,
            0.0005565,
            0.0005859999999999999,
            0.00024000000000000003,
            0.0002895,
            0.00041450000000000005,
            0.0003045,
            0.000424,
            0.00032,
            0.0003345,
            0.0006055,
            0.0003635,
            0.00034449999999999997,
            0.0006505,
            0.00044950000000000003,
            0.0002875,
            0.0005059999999999999,
            0.000304,
            0.00048399999999999995,
            0.0002995,
            0.0005205,
            0.00043400000000000003,
            0.000345,
            0.000405,
            0.0007199999999999999,
            0.00035999999999999997,
            0.0004615,
            0.0002855,
            0.00045799999999999997,
            0.0003795,
            0.00057,
            0.000594,
            0.0003455,
            0.000495,
            0.0005815,
            0.000258,
            0.0003015,
            0.000398,
            0.0003315,
            0.000394,
            0.000362,
            0.0003645,
            0.000559,
            0.00036649999999999996,
            0.0003715,
            0.0006325,
            0.000433,
            0.000277,
            0.0005020000000000001,
            0.000301,
            0.000505,
            0.00030250000000000003,
            0.000477,
            0.000395,
            0.00035999999999999997,
            0.000399,
            0.0007185,
            0.000375,
            0.000481,
            0.0002885,
            0.0004775,
            0.0003825,
            0.0005595,
            0.00057,
            0.00041,
            0.0006135,
            0.0006075,
            0.00023700000000000001,
            0.0003075,
            0.00039499999999999995,
            0.00033299999999999996,
            0.00037150000000000003,
            0.0003575,
            0.0003405,
            0.00058,
            0.00037850000000000004,
            0.000361,
            0.000664,
            0.0004225,
            0.0002845,
            0.000508,
            0.0003745,
            0.0005124999999999999,
            0.000301,
            0.000498,
            0.00044000000000000007,
            0.000303,
            0.00040950000000000003,
            0.0007095,
            0.000372,
            0.000481,
            0.000404,
            0.0004865,
            0.000372,
            0.0005325,
            0.0006,
            0.00037999999999999997,
            0.000537,
            0.000574,
            0.0002505,
            0.000306,
            0.00039349999999999997,
            0.00031800000000000003,
            0.0004825,
            0.000374,
            0.0003405,
            0.000571,
            0.000377,
            0.000376,
            0.000664,
            0.0004045,
            0.00029949999999999996,
            0.0005035,
            0.0003265,
            0.000529,
            0.0003205,
            0.00046049999999999997,
            0.00040249999999999997,
            0.0003795,
            0.0004035,
            0.0007155,
            0.00036899999999999997,
            0.0004885,
            0.000326,
            0.00047299999999999995,
            0.0003675,
            0.0006135,
            0.0006225,
            0.00035899999999999994,
            0.0004845,
            0.0006219999999999999,
            0.00027,
            0.000369,
            0.000398
        ],
        "test_fitness": "95% Bootstrap Confidence Interval: (25.3%, 39.8%), Median: 32.5%",
        "test_acc_list": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ],
        "test_cost_list": [
            0.000511,
            0.0006175,
            0.0004825,
            0.0003135,
            0.00030849999999999996,
            0.00051,
            0.000451,
            0.00031549999999999997,
            0.000312,
            0.00048650000000000006,
            0.00046200000000000006,
            0.000452,
            0.000395,
            0.000266,
            0.000362,
            0.00032700000000000003,
            0.0005635,
            0.0003945,
            0.0003105,
            0.00045950000000000006,
            0.0004115,
            0.0003545,
            0.00035800000000000003,
            0.000451,
            0.0003275,
            0.0002145,
            0.000278,
            0.00032649999999999997,
            0.0004675,
            0.000441,
            0.00037549999999999997,
            0.000384,
            0.0005525,
            0.000397,
            0.0004055,
            0.0003385,
            0.000367,
            0.000379,
            0.0004085,
            0.000481,
            0.0003435,
            0.000411,
            0.0007830000000000001,
            0.000461,
            0.0007585000000000001,
            0.0006919999999999999,
            0.000506,
            0.0002695,
            0.0004295,
            0.0009575,
            0.00036649999999999996,
            0.0002965,
            0.0005269999999999999,
            0.0006215,
            0.000504,
            0.0003015,
            0.0004225,
            0.0003675,
            0.000388,
            0.00035999999999999997,
            0.0005755000000000001,
            0.000401,
            0.0004055,
            0.000449,
            0.000473,
            0.00033299999999999996,
            0.000509,
            0.0003385,
            0.0004785,
            0.000595,
            0.0005295,
            0.0003855,
            0.00042749999999999993,
            0.000525,
            0.0004555,
            0.000454,
            0.000423,
            0.000672,
            0.0006094999999999999,
            0.00040649999999999996,
            0.000487,
            0.00040399999999999995,
            0.000372,
            0.000472,
            0.000394,
            0.00036399999999999996,
            0.0005085,
            0.000317,
            0.0005839999999999999,
            0.0003495,
            0.000386,
            0.0003855,
            0.000488,
            0.000408,
            0.00033350000000000003,
            0.002943,
            0.00045850000000000003,
            0.00038700000000000003,
            0.0006355,
            0.0004909999999999999,
            0.00044199999999999996,
            0.0002995,
            0.0005185,
            0.0004145,
            0.00039899999999999994,
            0.00033699999999999995,
            0.00045149999999999997,
            0.0004215,
            0.00026349999999999995,
            0.000494,
            0.0006195,
            0.000481,
            0.0003095,
            0.00047349999999999996,
            0.0002615,
            0.0003505,
            0.0004105,
            0.000428,
            0.0003415,
            0.00035549999999999997,
            0.000782,
            0.00039549999999999996,
            0.0006039999999999999,
            0.000516,
            0.000451,
            0.0003855,
            0.000402,
            0.000407,
            0.00045199999999999993,
            0.0003,
            0.00038750000000000004,
            0.00037799999999999997,
            0.0004495,
            0.001073,
            0.00038449999999999997,
            0.0003065,
            0.00039000000000000005,
            0.00033,
            0.0003855,
            0.0003875,
            0.00036050000000000003,
            0.0003645,
            0.00038899999999999997,
            0.0004355,
            0.000373,
            0.00045450000000000004,
            0.0005475,
            0.0003375,
            0.00045149999999999997,
            0.00042349999999999994,
            0.000383,
            0.000649,
            0.00039999999999999996,
            0.0004375,
            0.0005515,
            0.00038800000000000005,
            0.000276,
            0.000471,
            0.0004395,
            0.000482,
            0.0003635,
            0.0004265,
            0.00038850000000000006,
            0.00039949999999999995,
            0.0004075,
            0.00035499999999999996
        ]
    },
    {
        "thought": "Insights:\nThe insights from the reflection indicate that leveraging different cognitive strategies (analogical, deductive, and probabilistic reasoning) can provide diverse solutions. Enhancing the final decision-making process by considering confidence scores can lead to a more robust final answer.\n\nOverall Idea:\nThe updated architecture, 'Cognitive Strategy Aggregation with Confidence', will involve creating an agent to generate diverse problem-solving strategies explicitly, followed by sub-agents for each cognitive strategy to generate solutions. The final decision will be made using a weighted approach based on the confidence scores provided by each sub-agent.\n\nImplementation:\nHere are the steps to implement this approach:\n1. Define the instructions for generating diverse problem-solving strategies.\n2. Implement sub-agents for analogical, deductive, and probabilistic reasoning, each providing a confidence score along with their answer.\n3. Use a final decision agent to aggregate solutions based on confidence scores.\n4. Ensure the agents are instructed to think step by step and provide the required output in JSON format.\n5. Return the final answer based on aggregated solutions with confidence scores.",
        "name": "Cognitive Strategy Aggregation with Confidence",
        "code": "def forward(self, taskInfo):\n    # Instructions for generating diverse problem-solving strategies\n    strategy_instruction = \"Please generate diverse problem-solving strategies using different cognitive techniques such as analogical reasoning, deductive reasoning, and probabilistic reasoning. Clearly state the strategy you are using.\"\n\n    # Instructions for each sub-agent including confidence score\n    analogical_instruction = \"Using analogical reasoning and the provided strategy, think step by step and solve the task. Provide your solution along with a confidence score from 0 to 1.\"\n    deductive_instruction = \"Using deductive reasoning and the provided strategy, think step by step and solve the task. Provide your solution along with a confidence score from 0 to 1.\"\n    probabilistic_instruction = \"Using probabilistic reasoning and the provided strategy, think step by step and solve the task. Provide your solution along with a confidence score from 0 to 1.\"\n\n    # Instruction for final decision-making based on confidence scores\n    final_decision_instruction = \"Given all the above solutions and their confidence scores, reason over them carefully and provide a final answer.\"\n\n    # Instantiate agents\n    strategy_agent = LLMAgentBase(['thinking', 'strategy'], 'Strategy Agent')\n    analogical_agent = LLMAgentBase(['thinking', 'answer', 'confidence'], 'Analogical Agent')\n    deductive_agent = LLMAgentBase(['thinking', 'answer', 'confidence'], 'Deductive Agent')\n    probabilistic_agent = LLMAgentBase(['thinking', 'answer', 'confidence'], 'Probabilistic Agent')\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    # Generate diverse problem-solving strategies\n    strategy_outputs = strategy_agent([taskInfo], strategy_instruction)\n    strategy_thinking, strategy_info = strategy_outputs[0], strategy_outputs[1]\n\n    # Generate diverse solutions using sub-agents with confidence scores\n    analogical_outputs = analogical_agent([taskInfo, strategy_thinking, strategy_info], analogical_instruction)\n    deductive_outputs = deductive_agent([taskInfo, strategy_thinking, strategy_info], deductive_instruction)\n    probabilistic_outputs = probabilistic_agent([taskInfo, strategy_thinking, strategy_info], probabilistic_instruction)\n\n    # Aggregate solutions and make the final decision based on confidence scores\n    all_infos = [taskInfo, strategy_thinking, strategy_info] + analogical_outputs + deductive_outputs + probabilistic_outputs\n    final_outputs = final_decision_agent(all_infos, final_decision_instruction)\n\n    # Ensure returning the final answer\n    for info in final_outputs:\n        if info.name == 'answer':\n            return info\n    return final_outputs[0]  # Safety fallback, should not occur in practice\n",
        "fitness": "95% Bootstrap Confidence Interval: (25.6%, 40.0%), Median: 32.5%",
        "generation": 9,
        "acc_list": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "cost_list": [
            0.0016354999999999998,
            0.0012105,
            0.0017204999999999998,
            0.0014215,
            0.0020845,
            0.001402,
            0.001905,
            0.0020324999999999996,
            0.0017644999999999998,
            0.001193,
            0.001735,
            0.001494,
            0.002003,
            0.0013770000000000002,
            0.0018429999999999998,
            0.0014385,
            0.001376,
            0.0018195,
            0.00232,
            0.0013399999999999998,
            0.001563,
            0.0014264999999999998,
            0.0015769999999999998,
            0.001375,
            0.001838,
            0.001869,
            0.0014089999999999999,
            0.001708,
            0.0025685,
            0.0011895,
            0.0011669999999999999,
            0.0015459999999999998,
            0.0016565,
            0.0013614999999999999,
            0.0010225,
            0.0013435,
            0.0021804999999999997,
            0.0015924999999999997,
            0.0015595,
            0.002297,
            0.0015339999999999998,
            0.001238,
            0.001863,
            0.001666,
            0.0019914999999999998,
            0.0016099999999999999,
            0.001958,
            0.0014655,
            0.0014345,
            0.001937,
            0.002301,
            0.0014644999999999999,
            0.0017944999999999999,
            0.001458,
            0.0017659999999999998,
            0.001576,
            0.0022435,
            0.0019935,
            0.001597,
            0.0018059999999999999,
            0.0021565,
            0.001641,
            0.0013525,
            0.0018914999999999997,
            0.0014645,
            0.0016889999999999997,
            0.0016474999999999999,
            0.0014705,
            0.0022665,
            0.0014340000000000002,
            0.0016905000000000002,
            0.0019795,
            0.0016944999999999998,
            0.0013664999999999999,
            0.0019129999999999998,
            0.0015039999999999997,
            0.0017355,
            0.0014204999999999999,
            0.0018499999999999999,
            0.001412,
            0.001441,
            0.0017690000000000002,
            0.0022099999999999997,
            0.0015249999999999999,
            0.0019230000000000002,
            0.0013605000000000002,
            0.0015975,
            0.0014375,
            0.001804,
            0.0020265,
            0.0015275,
            0.0017140000000000002,
            0.0021835,
            0.0014115,
            0.0012014999999999999,
            0.0018570000000000001,
            0.0015860000000000002,
            0.001228,
            0.0018249999999999998,
            0.001356,
            0.0025685000000000005,
            0.0014435,
            0.0016219999999999997,
            0.001995,
            0.0018785,
            0.0013635000000000001,
            0.001874,
            0.0013915,
            0.001691,
            0.001527,
            0.0019489999999999998,
            0.0014875,
            0.0012855,
            0.0018465,
            0.002442,
            0.0018055,
            0.0017449999999999998,
            0.0013365,
            0.0016585,
            0.001379,
            0.001862,
            0.0020915,
            0.001457,
            0.0016849999999999999,
            0.0022895,
            0.0014130000000000002,
            0.0014860000000000001,
            0.002062,
            0.0015345,
            0.001389,
            0.00164,
            0.001559,
            0.0022589999999999997,
            0.0013935,
            0.0015605000000000003,
            0.002065,
            0.001548,
            0.0012265000000000002,
            0.001908,
            0.0015485,
            0.0016645000000000002,
            0.0013865000000000001,
            0.0017949999999999997,
            0.0014775,
            0.0014104999999999999,
            0.0017685,
            0.002311,
            0.001914,
            0.0016935000000000001,
            0.0013210000000000001,
            0.0019649999999999997,
            0.0018254999999999999,
            0.0019415,
            0.0020575,
            0.001569,
            0.0018159999999999997,
            0.0022459999999999997,
            0.001601,
            0.001239,
            0.0021225000000000003
        ],
        "test_fitness": "95% Bootstrap Confidence Interval: (24.7%, 38.6%), Median: 31.3%",
        "test_acc_list": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "test_cost_list": [
            0.001962,
            0.0024295000000000002,
            0.001611,
            0.0016265000000000001,
            0.0014555,
            0.001838,
            0.0017909999999999998,
            0.0017324999999999999,
            0.0014419999999999997,
            0.0017100000000000001,
            0.0017164999999999997,
            0.0017565,
            0.0015645,
            0.0015050000000000003,
            0.001466,
            0.0013599999999999999,
            0.0020165,
            0.0016475,
            0.001844,
            0.001856,
            0.0017145,
            0.001864,
            0.0015914999999999998,
            0.001731,
            0.001778,
            0.001195,
            0.0016729999999999998,
            0.001697,
            0.0014215,
            0.0017909999999999998,
            0.0018440000000000002,
            0.001762,
            0.0019364999999999999,
            0.0014195000000000002,
            0.002298,
            0.001507,
            0.0015719999999999998,
            0.0014085,
            0.0018154999999999998,
            0.001785,
            0.0013399999999999998,
            0.001558,
            0.0026649999999999994,
            0.001603,
            0.0024885000000000003,
            0.0023344999999999998,
            0.0019874999999999997,
            0.0013809999999999998,
            0.0016219999999999997,
            0.0028795,
            0.0016885,
            0.0012144999999999999,
            0.0023959999999999997,
            0.002029,
            0.0022285,
            0.001696,
            0.0018219999999999998,
            0.0015165,
            0.0015534999999999998,
            0.001815,
            0.0018124999999999999,
            0.0013915,
            0.0018484999999999999,
            0.0017355,
            0.0016940000000000002,
            0.0013115000000000002,
            0.00224,
            0.001369,
            0.001683,
            0.001952,
            0.001829,
            0.0015925,
            0.0015775,
            0.00202,
            0.001694,
            0.001624,
            0.0019429999999999998,
            0.0021865,
            0.0018954999999999998,
            0.002163,
            0.0020845,
            0.0016179999999999999,
            0.0015275,
            0.0018349999999999998,
            0.0016885,
            0.0019154999999999999,
            0.0016294999999999999,
            0.0014594999999999999,
            0.0018780000000000001,
            0.0013560000000000002,
            0.0017144999999999999,
            0.001877,
            0.001739,
            0.001924,
            0.0013809999999999998,
            0.0079915,
            0.001729,
            0.0017419999999999998,
            0.0020165,
            0.0022684999999999997,
            0.001881,
            0.0012615,
            0.0026565,
            0.0016229999999999999,
            0.001588,
            0.0014385,
            0.0019069999999999998,
            0.0018514999999999998,
            0.0012485,
            0.001408,
            0.0021439999999999996,
            0.0016870000000000001,
            0.0012595,
            0.001941,
            0.0013155,
            0.0015140000000000002,
            0.0017325,
            0.001638,
            0.0017959999999999999,
            0.001421,
            0.0021455,
            0.001555,
            0.0024579999999999997,
            0.0018325000000000001,
            0.001447,
            0.0017304999999999998,
            0.0019475,
            0.0013,
            0.0016875000000000002,
            0.0015165,
            0.0018304999999999999,
            0.0020085,
            0.0014104999999999999,
            0.0037194999999999997,
            0.0018905,
            0.00135,
            0.0020995000000000002,
            0.001567,
            0.0019295,
            0.0016244999999999999,
            0.0014255,
            0.0017199999999999997,
            0.001529,
            0.002012,
            0.0016944999999999998,
            0.002126,
            0.0018419999999999999,
            0.0015869999999999999,
            0.0018935,
            0.0016719999999999999,
            0.001521,
            0.0022494999999999998,
            0.0014320000000000001,
            0.0017144999999999999,
            0.002068,
            0.0015869999999999999,
            0.0009580000000000001,
            0.0017530000000000002,
            0.0017025,
            0.0019364999999999999,
            0.001409,
            0.001812,
            0.0017844999999999998,
            0.0015325,
            0.0020365,
            0.001889
        ]
    }
]